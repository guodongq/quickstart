// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20250507074024-cc72767e6eac DO NOT EDIT.
package server

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Apikey_authScopes = "apikey_auth.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Error defines model for error.
type Error struct {
	// Id A short identifier corresponding to the HTTP status code returned. For example, the ID for a response returning a 404 status code would be "not_found."
	Id string `json:"id"`

	// Message A message providing additional information about the error, including  details to help resolve it when possible.
	Message string `json:"message"`

	// RequestId Optionally, some endpoints may include a request ID that should be provided when reporting bugs or opening support tickets to help identify the issue.
	RequestId *string `json:"request_id,omitempty"`
}

// Identifier The unique identifier of the resource in UUID format
type Identifier = openapi_types.UUID

// MetaProperties Information about the response itself.
type MetaProperties struct {
	// CreatedAt A time value given in ISO8601 combined date and time format that represents when the resource was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatedBy The user who created the resource.
	CreatedBy *openapi_types.UUID `json:"created_by,omitempty"`

	// DeletedAt A time value given in ISO8601 combined date and time format that represents when the resource was deleted.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`

	// DeletedBy The user who deleted the resource.
	DeletedBy *openapi_types.UUID `json:"deleted_by,omitempty"`

	// UpdatedAt A time value given in ISO8601 combined date and time format that represents when the resource was updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UpdatedBy The user who updated the resource.
	UpdatedBy *openapi_types.UUID `json:"updated_by,omitempty"`

	// Version The version of the resource.
	Version *int `json:"version,omitempty"`
}

// PageProperties properties of pageable object
type PageProperties struct {
	// Limit max records to return
	Limit *interface{} `json:"limit,omitempty"`

	// Skip number of items to skip
	Skip *interface{} `json:"skip,omitempty"`

	// Sort Sorting criteria for the list, using a "+" or "-" prefix to specify ascending or descending order.
	Sort *interface{} `json:"sort,omitempty"`
}

// Project defines model for project.
type Project struct {
	// Description A description of the project
	Description *string `json:"description,omitempty"`

	// Id The unique identifier of the resource in UUID format
	Id *Identifier `json:"id,omitempty"`

	// Meta Information about the response itself.
	Meta *MetaProperties `json:"meta,omitempty"`

	// Name The name of project
	Name *string `json:"name,omitempty"`
}

// ProjectBase defines model for project_base.
type ProjectBase struct {
	// Description A description of the project
	Description *string `json:"description,omitempty"`

	// Name The name of project
	Name *string `json:"name,omitempty"`
}

// Total Total number of records available.
type Total = int32

// Pageable properties of pageable object
type Pageable = PageProperties

// ProjectId defines model for project_id.
type ProjectId = openapi_types.UUID

// ProjectSearchFilter defines model for project_search_filter.
type ProjectSearchFilter = ProjectBase

// ExistingProject defines model for existing_project.
type ExistingProject = Project

// Forbidden defines model for forbidden.
type Forbidden = Error

// NotFound defines model for not_found.
type NotFound = Error

// PreconditionFailed defines model for precondition_failed.
type PreconditionFailed = Error

// ProjectsList defines model for projects_list.
type ProjectsList struct {
	// Content Array of actions.
	Content *[]Project `json:"content,omitempty"`

	// Pageable properties of pageable object
	Pageable *PageProperties `json:"pageable,omitempty"`

	// Total Total number of records available.
	Total *Total `json:"total,omitempty"`
}

// ServerError defines model for server_error.
type ServerError = Error

// TooManyRequests defines model for too_many_requests.
type TooManyRequests = Error

// Unauthorized defines model for unauthorized.
type Unauthorized = Error

// UnexpectedError defines model for unexpected_error.
type UnexpectedError = Error

// ProjectsListParams defines parameters for ProjectsList.
type ProjectsListParams struct {
	// Pageable properties of pagination parameters
	Pageable *Pageable `form:"pageable,omitempty" json:"pageable,omitempty"`

	// SearchFilter search filter condition for list projects
	SearchFilter ProjectSearchFilter `form:"searchFilter" json:"searchFilter"`
}

// ProjectsCreateJSONBody defines parameters for ProjectsCreate.
type ProjectsCreateJSONBody = ProjectBase

// ProjectsUpdateJSONBody defines parameters for ProjectsUpdate.
type ProjectsUpdateJSONBody = ProjectBase

// ProjectsCreateJSONRequestBody defines body for ProjectsCreate for application/json ContentType.
type ProjectsCreateJSONRequestBody = ProjectsCreateJSONBody

// ProjectsPatchJSONRequestBody defines body for ProjectsPatch for application/json ContentType.
type ProjectsPatchJSONRequestBody = ProjectBase

// ProjectsUpdateJSONRequestBody defines body for ProjectsUpdate for application/json ContentType.
type ProjectsUpdateJSONRequestBody = ProjectsUpdateJSONBody

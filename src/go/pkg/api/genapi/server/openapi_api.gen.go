// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20250507074024-cc72767e6eac DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List All Projects
	// (GET /v1/projects)
	ProjectsList(c *gin.Context, params ProjectsListParams)
	// Create a Project
	// (POST /v1/projects)
	ProjectsCreate(c *gin.Context)
	// Delete an Existing Project
	// (DELETE /v1/projects/{project_id})
	ProjectsDelete(c *gin.Context, projectId ProjectId)
	// Retrieve an Existing Project
	// (GET /v1/projects/{project_id})
	ProjectsGet(c *gin.Context, projectId ProjectId)
	// Patch a Project
	// (PATCH /v1/projects/{project_id})
	ProjectsPatch(c *gin.Context, projectId ProjectId)
	// Update a Project
	// (PUT /v1/projects/{project_id})
	ProjectsUpdate(c *gin.Context, projectId ProjectId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ProjectsList operation middleware
func (siw *ServerInterfaceWrapper) ProjectsList(c *gin.Context) {

	var err error

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProjectsListParams

	// ------------- Optional query parameter "pageable" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageable", c.Request.URL.Query(), &params.Pageable)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageable: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "searchFilter" -------------

	if paramValue := c.Query("searchFilter"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument searchFilter is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "searchFilter", c.Request.URL.Query(), &params.SearchFilter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter searchFilter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsList(c, params)
}

// ProjectsCreate operation middleware
func (siw *ServerInterfaceWrapper) ProjectsCreate(c *gin.Context) {

	c.Set(Bearer_authScopes, []string{"project:create"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsCreate(c)
}

// ProjectsDelete operation middleware
func (siw *ServerInterfaceWrapper) ProjectsDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsDelete(c, projectId)
}

// ProjectsGet operation middleware
func (siw *ServerInterfaceWrapper) ProjectsGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsGet(c, projectId)
}

// ProjectsPatch operation middleware
func (siw *ServerInterfaceWrapper) ProjectsPatch(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsPatch(c, projectId)
}

// ProjectsUpdate operation middleware
func (siw *ServerInterfaceWrapper) ProjectsUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsUpdate(c, projectId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/projects", wrapper.ProjectsList)
	router.POST(options.BaseURL+"/v1/projects", wrapper.ProjectsCreate)
	router.DELETE(options.BaseURL+"/v1/projects/:project_id", wrapper.ProjectsDelete)
	router.GET(options.BaseURL+"/v1/projects/:project_id", wrapper.ProjectsGet)
	router.PATCH(options.BaseURL+"/v1/projects/:project_id", wrapper.ProjectsPatch)
	router.PUT(options.BaseURL+"/v1/projects/:project_id", wrapper.ProjectsUpdate)
}

type ExistingProjectJSONResponse Project

type ForbiddenJSONResponse Error

type NoContentResponse struct {
}

type NotFoundJSONResponse Error

type PreconditionFailedJSONResponse Error

type ProjectsListJSONResponse struct {
	// Content Array of actions.
	Content *[]Project `json:"content,omitempty"`

	// Pageable properties of pageable object
	Pageable *PageProperties `json:"pageable,omitempty"`

	// Total Total number of records available.
	Total *Total `json:"total,omitempty"`
}

type ServerErrorJSONResponse Error

type TooManyRequestsJSONResponse Error

type UnauthorizedJSONResponse Error

type UnexpectedErrorJSONResponse Error

type ProjectsListRequestObject struct {
	Params ProjectsListParams
}

type ProjectsListResponseObject interface {
	VisitProjectsListResponse(w http.ResponseWriter) error
}

type ProjectsList200JSONResponse struct{ ProjectsListJSONResponse }

func (response ProjectsList200JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsList401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsList401JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsList403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsList403JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsList429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsList429JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsList500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsList500JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsListdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsListdefaultJSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsCreateRequestObject struct {
	Body *ProjectsCreateJSONRequestBody
}

type ProjectsCreateResponseObject interface {
	VisitProjectsCreateResponse(w http.ResponseWriter) error
}

type ProjectsCreate201JSONResponse struct{ ExistingProjectJSONResponse }

func (response ProjectsCreate201JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreate401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsCreate401JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreate403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsCreate403JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreate429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsCreate429JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreate500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsCreate500JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreatedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsCreatedefaultJSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsDeleteRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type ProjectsDeleteResponseObject interface {
	VisitProjectsDeleteResponse(w http.ResponseWriter) error
}

type ProjectsDelete204Response = NoContentResponse

func (response ProjectsDelete204Response) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ProjectsDelete401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsDelete401JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsDelete403JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete404JSONResponse struct{ NotFoundJSONResponse }

func (response ProjectsDelete404JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete412JSONResponse struct{ PreconditionFailedJSONResponse }

func (response ProjectsDelete412JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsDelete429JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsDelete500JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDeletedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsDeletedefaultJSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsGetRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type ProjectsGetResponseObject interface {
	VisitProjectsGetResponse(w http.ResponseWriter) error
}

type ProjectsGet200JSONResponse struct{ ExistingProjectJSONResponse }

func (response ProjectsGet200JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsGet401JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsGet403JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet404JSONResponse struct{ NotFoundJSONResponse }

func (response ProjectsGet404JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsGet429JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsGet500JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGetdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsGetdefaultJSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsPatchRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *ProjectsPatchJSONRequestBody
}

type ProjectsPatchResponseObject interface {
	VisitProjectsPatchResponse(w http.ResponseWriter) error
}

type ProjectsPatch200JSONResponse struct{ ExistingProjectJSONResponse }

func (response ProjectsPatch200JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsPatch401JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsPatch403JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch404JSONResponse struct{ NotFoundJSONResponse }

func (response ProjectsPatch404JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsPatch429JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsPatch500JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatchdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsPatchdefaultJSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsUpdateRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *ProjectsUpdateJSONRequestBody
}

type ProjectsUpdateResponseObject interface {
	VisitProjectsUpdateResponse(w http.ResponseWriter) error
}

type ProjectsUpdate200JSONResponse struct{ ExistingProjectJSONResponse }

func (response ProjectsUpdate200JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsUpdate401JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsUpdate403JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate404JSONResponse struct{ NotFoundJSONResponse }

func (response ProjectsUpdate404JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsUpdate429JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsUpdate500JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdatedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsUpdatedefaultJSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List All Projects
	// (GET /v1/projects)
	ProjectsList(ctx context.Context, request ProjectsListRequestObject) (ProjectsListResponseObject, error)
	// Create a Project
	// (POST /v1/projects)
	ProjectsCreate(ctx context.Context, request ProjectsCreateRequestObject) (ProjectsCreateResponseObject, error)
	// Delete an Existing Project
	// (DELETE /v1/projects/{project_id})
	ProjectsDelete(ctx context.Context, request ProjectsDeleteRequestObject) (ProjectsDeleteResponseObject, error)
	// Retrieve an Existing Project
	// (GET /v1/projects/{project_id})
	ProjectsGet(ctx context.Context, request ProjectsGetRequestObject) (ProjectsGetResponseObject, error)
	// Patch a Project
	// (PATCH /v1/projects/{project_id})
	ProjectsPatch(ctx context.Context, request ProjectsPatchRequestObject) (ProjectsPatchResponseObject, error)
	// Update a Project
	// (PUT /v1/projects/{project_id})
	ProjectsUpdate(ctx context.Context, request ProjectsUpdateRequestObject) (ProjectsUpdateResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ProjectsList operation middleware
func (sh *strictHandler) ProjectsList(ctx *gin.Context, params ProjectsListParams) {
	var request ProjectsListRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsList(ctx, request.(ProjectsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsListResponseObject); ok {
		if err := validResponse.VisitProjectsListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsCreate operation middleware
func (sh *strictHandler) ProjectsCreate(ctx *gin.Context) {
	var request ProjectsCreateRequestObject

	var body ProjectsCreateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsCreate(ctx, request.(ProjectsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsCreateResponseObject); ok {
		if err := validResponse.VisitProjectsCreateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsDelete operation middleware
func (sh *strictHandler) ProjectsDelete(ctx *gin.Context, projectId ProjectId) {
	var request ProjectsDeleteRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsDelete(ctx, request.(ProjectsDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsDeleteResponseObject); ok {
		if err := validResponse.VisitProjectsDeleteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsGet operation middleware
func (sh *strictHandler) ProjectsGet(ctx *gin.Context, projectId ProjectId) {
	var request ProjectsGetRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsGet(ctx, request.(ProjectsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsGetResponseObject); ok {
		if err := validResponse.VisitProjectsGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsPatch operation middleware
func (sh *strictHandler) ProjectsPatch(ctx *gin.Context, projectId ProjectId) {
	var request ProjectsPatchRequestObject

	request.ProjectId = projectId

	var body ProjectsPatchJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsPatch(ctx, request.(ProjectsPatchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsPatch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsPatchResponseObject); ok {
		if err := validResponse.VisitProjectsPatchResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsUpdate operation middleware
func (sh *strictHandler) ProjectsUpdate(ctx *gin.Context, projectId ProjectId) {
	var request ProjectsUpdateRequestObject

	request.ProjectId = projectId

	var body ProjectsUpdateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsUpdate(ctx, request.(ProjectsUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsUpdateResponseObject); ok {
		if err := validResponse.VisitProjectsUpdateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

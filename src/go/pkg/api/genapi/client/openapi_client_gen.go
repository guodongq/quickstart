// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20250507074024-cc72767e6eac DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ActionsList request
	ActionsList(ctx context.Context, params *ActionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsCreateWithBody request with any body
	ActionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionsCreate(ctx context.Context, body ActionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsDelete request
	ActionsDelete(ctx context.Context, actionId ActionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsGet request
	ActionsGet(ctx context.Context, actionId ActionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsPatchWithBody request with any body
	ActionsPatchWithBody(ctx context.Context, actionId ActionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionsPatch(ctx context.Context, actionId ActionId, body ActionsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsUpdateWithBody request with any body
	ActionsUpdateWithBody(ctx context.Context, actionId ActionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionsUpdate(ctx context.Context, actionId ActionId, body ActionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PermissionsList request
	PermissionsList(ctx context.Context, params *PermissionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PermissionsCreateWithBody request with any body
	PermissionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PermissionsCreate(ctx context.Context, body PermissionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PermissionsDelete request
	PermissionsDelete(ctx context.Context, permissionId PermissionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PermissionsGet request
	PermissionsGet(ctx context.Context, permissionId PermissionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PermissionsPatchWithBody request with any body
	PermissionsPatchWithBody(ctx context.Context, permissionId PermissionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PermissionsPatch(ctx context.Context, permissionId PermissionId, body PermissionsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PermissionsUpdateWithBody request with any body
	PermissionsUpdateWithBody(ctx context.Context, permissionId PermissionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PermissionsUpdate(ctx context.Context, permissionId PermissionId, body PermissionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesList request
	RolesList(ctx context.Context, params *RolesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesCreateWithBody request with any body
	RolesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RolesCreate(ctx context.Context, body RolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesDelete request
	RolesDelete(ctx context.Context, roleId RoleId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesGet request
	RolesGet(ctx context.Context, roleId RoleId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesPatchWithBody request with any body
	RolesPatchWithBody(ctx context.Context, roleId RoleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RolesPatch(ctx context.Context, roleId RoleId, body RolesPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesUpdateWithBody request with any body
	RolesUpdateWithBody(ctx context.Context, roleId RoleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RolesUpdate(ctx context.Context, roleId RoleId, body RolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ActionsList(ctx context.Context, params *ActionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsCreate(ctx context.Context, body ActionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsDelete(ctx context.Context, actionId ActionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsDeleteRequest(c.Server, actionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsGet(ctx context.Context, actionId ActionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsGetRequest(c.Server, actionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsPatchWithBody(ctx context.Context, actionId ActionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsPatchRequestWithBody(c.Server, actionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsPatch(ctx context.Context, actionId ActionId, body ActionsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsPatchRequest(c.Server, actionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsUpdateWithBody(ctx context.Context, actionId ActionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsUpdateRequestWithBody(c.Server, actionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsUpdate(ctx context.Context, actionId ActionId, body ActionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsUpdateRequest(c.Server, actionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsList(ctx context.Context, params *PermissionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsCreate(ctx context.Context, body PermissionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsDelete(ctx context.Context, permissionId PermissionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsDeleteRequest(c.Server, permissionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsGet(ctx context.Context, permissionId PermissionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsGetRequest(c.Server, permissionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsPatchWithBody(ctx context.Context, permissionId PermissionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsPatchRequestWithBody(c.Server, permissionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsPatch(ctx context.Context, permissionId PermissionId, body PermissionsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsPatchRequest(c.Server, permissionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsUpdateWithBody(ctx context.Context, permissionId PermissionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsUpdateRequestWithBody(c.Server, permissionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsUpdate(ctx context.Context, permissionId PermissionId, body PermissionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsUpdateRequest(c.Server, permissionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesList(ctx context.Context, params *RolesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesCreate(ctx context.Context, body RolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesDelete(ctx context.Context, roleId RoleId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesDeleteRequest(c.Server, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesGet(ctx context.Context, roleId RoleId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesGetRequest(c.Server, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesPatchWithBody(ctx context.Context, roleId RoleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesPatchRequestWithBody(c.Server, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesPatch(ctx context.Context, roleId RoleId, body RolesPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesPatchRequest(c.Server, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesUpdateWithBody(ctx context.Context, roleId RoleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesUpdateRequestWithBody(c.Server, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesUpdate(ctx context.Context, roleId RoleId, body RolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesUpdateRequest(c.Server, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewActionsListRequest generates requests for ActionsList
func NewActionsListRequest(server string, params *ActionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Pageable != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageable", runtime.ParamLocationQuery, *params.Pageable); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchFilter", runtime.ParamLocationQuery, params.SearchFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionsCreateRequest calls the generic ActionsCreate builder with application/json body
func NewActionsCreateRequest(server string, body ActionsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewActionsCreateRequestWithBody generates requests for ActionsCreate with any type of body
func NewActionsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionsDeleteRequest generates requests for ActionsDelete
func NewActionsDeleteRequest(server string, actionId ActionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "action_id", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionsGetRequest generates requests for ActionsGet
func NewActionsGetRequest(server string, actionId ActionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "action_id", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionsPatchRequest calls the generic ActionsPatch builder with application/json body
func NewActionsPatchRequest(server string, actionId ActionId, body ActionsPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionsPatchRequestWithBody(server, actionId, "application/json", bodyReader)
}

// NewActionsPatchRequestWithBody generates requests for ActionsPatch with any type of body
func NewActionsPatchRequestWithBody(server string, actionId ActionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "action_id", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionsUpdateRequest calls the generic ActionsUpdate builder with application/json body
func NewActionsUpdateRequest(server string, actionId ActionId, body ActionsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionsUpdateRequestWithBody(server, actionId, "application/json", bodyReader)
}

// NewActionsUpdateRequestWithBody generates requests for ActionsUpdate with any type of body
func NewActionsUpdateRequestWithBody(server string, actionId ActionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "action_id", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPermissionsListRequest generates requests for PermissionsList
func NewPermissionsListRequest(server string, params *PermissionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Pageable != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageable", runtime.ParamLocationQuery, *params.Pageable); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchFilter", runtime.ParamLocationQuery, params.SearchFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPermissionsCreateRequest calls the generic PermissionsCreate builder with application/json body
func NewPermissionsCreateRequest(server string, body PermissionsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPermissionsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPermissionsCreateRequestWithBody generates requests for PermissionsCreate with any type of body
func NewPermissionsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPermissionsDeleteRequest generates requests for PermissionsDelete
func NewPermissionsDeleteRequest(server string, permissionId PermissionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permission_id", runtime.ParamLocationPath, permissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/permissions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPermissionsGetRequest generates requests for PermissionsGet
func NewPermissionsGetRequest(server string, permissionId PermissionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permission_id", runtime.ParamLocationPath, permissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/permissions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPermissionsPatchRequest calls the generic PermissionsPatch builder with application/json body
func NewPermissionsPatchRequest(server string, permissionId PermissionId, body PermissionsPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPermissionsPatchRequestWithBody(server, permissionId, "application/json", bodyReader)
}

// NewPermissionsPatchRequestWithBody generates requests for PermissionsPatch with any type of body
func NewPermissionsPatchRequestWithBody(server string, permissionId PermissionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permission_id", runtime.ParamLocationPath, permissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/permissions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPermissionsUpdateRequest calls the generic PermissionsUpdate builder with application/json body
func NewPermissionsUpdateRequest(server string, permissionId PermissionId, body PermissionsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPermissionsUpdateRequestWithBody(server, permissionId, "application/json", bodyReader)
}

// NewPermissionsUpdateRequestWithBody generates requests for PermissionsUpdate with any type of body
func NewPermissionsUpdateRequestWithBody(server string, permissionId PermissionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permission_id", runtime.ParamLocationPath, permissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/permissions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRolesListRequest generates requests for RolesList
func NewRolesListRequest(server string, params *RolesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Pageable != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageable", runtime.ParamLocationQuery, *params.Pageable); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchFilter", runtime.ParamLocationQuery, params.SearchFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRolesCreateRequest calls the generic RolesCreate builder with application/json body
func NewRolesCreateRequest(server string, body RolesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRolesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewRolesCreateRequestWithBody generates requests for RolesCreate with any type of body
func NewRolesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRolesDeleteRequest generates requests for RolesDelete
func NewRolesDeleteRequest(server string, roleId RoleId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRolesGetRequest generates requests for RolesGet
func NewRolesGetRequest(server string, roleId RoleId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRolesPatchRequest calls the generic RolesPatch builder with application/json body
func NewRolesPatchRequest(server string, roleId RoleId, body RolesPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRolesPatchRequestWithBody(server, roleId, "application/json", bodyReader)
}

// NewRolesPatchRequestWithBody generates requests for RolesPatch with any type of body
func NewRolesPatchRequestWithBody(server string, roleId RoleId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRolesUpdateRequest calls the generic RolesUpdate builder with application/json body
func NewRolesUpdateRequest(server string, roleId RoleId, body RolesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRolesUpdateRequestWithBody(server, roleId, "application/json", bodyReader)
}

// NewRolesUpdateRequestWithBody generates requests for RolesUpdate with any type of body
func NewRolesUpdateRequestWithBody(server string, roleId RoleId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ActionsListWithResponse request
	ActionsListWithResponse(ctx context.Context, params *ActionsListParams, reqEditors ...RequestEditorFn) (*ActionsListResponse, error)

	// ActionsCreateWithBodyWithResponse request with any body
	ActionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsCreateResponse, error)

	ActionsCreateWithResponse(ctx context.Context, body ActionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsCreateResponse, error)

	// ActionsDeleteWithResponse request
	ActionsDeleteWithResponse(ctx context.Context, actionId ActionId, reqEditors ...RequestEditorFn) (*ActionsDeleteResponse, error)

	// ActionsGetWithResponse request
	ActionsGetWithResponse(ctx context.Context, actionId ActionId, reqEditors ...RequestEditorFn) (*ActionsGetResponse, error)

	// ActionsPatchWithBodyWithResponse request with any body
	ActionsPatchWithBodyWithResponse(ctx context.Context, actionId ActionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsPatchResponse, error)

	ActionsPatchWithResponse(ctx context.Context, actionId ActionId, body ActionsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsPatchResponse, error)

	// ActionsUpdateWithBodyWithResponse request with any body
	ActionsUpdateWithBodyWithResponse(ctx context.Context, actionId ActionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsUpdateResponse, error)

	ActionsUpdateWithResponse(ctx context.Context, actionId ActionId, body ActionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsUpdateResponse, error)

	// PermissionsListWithResponse request
	PermissionsListWithResponse(ctx context.Context, params *PermissionsListParams, reqEditors ...RequestEditorFn) (*PermissionsListResponse, error)

	// PermissionsCreateWithBodyWithResponse request with any body
	PermissionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PermissionsCreateResponse, error)

	PermissionsCreateWithResponse(ctx context.Context, body PermissionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PermissionsCreateResponse, error)

	// PermissionsDeleteWithResponse request
	PermissionsDeleteWithResponse(ctx context.Context, permissionId PermissionId, reqEditors ...RequestEditorFn) (*PermissionsDeleteResponse, error)

	// PermissionsGetWithResponse request
	PermissionsGetWithResponse(ctx context.Context, permissionId PermissionId, reqEditors ...RequestEditorFn) (*PermissionsGetResponse, error)

	// PermissionsPatchWithBodyWithResponse request with any body
	PermissionsPatchWithBodyWithResponse(ctx context.Context, permissionId PermissionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PermissionsPatchResponse, error)

	PermissionsPatchWithResponse(ctx context.Context, permissionId PermissionId, body PermissionsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PermissionsPatchResponse, error)

	// PermissionsUpdateWithBodyWithResponse request with any body
	PermissionsUpdateWithBodyWithResponse(ctx context.Context, permissionId PermissionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PermissionsUpdateResponse, error)

	PermissionsUpdateWithResponse(ctx context.Context, permissionId PermissionId, body PermissionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PermissionsUpdateResponse, error)

	// RolesListWithResponse request
	RolesListWithResponse(ctx context.Context, params *RolesListParams, reqEditors ...RequestEditorFn) (*RolesListResponse, error)

	// RolesCreateWithBodyWithResponse request with any body
	RolesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RolesCreateResponse, error)

	RolesCreateWithResponse(ctx context.Context, body RolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RolesCreateResponse, error)

	// RolesDeleteWithResponse request
	RolesDeleteWithResponse(ctx context.Context, roleId RoleId, reqEditors ...RequestEditorFn) (*RolesDeleteResponse, error)

	// RolesGetWithResponse request
	RolesGetWithResponse(ctx context.Context, roleId RoleId, reqEditors ...RequestEditorFn) (*RolesGetResponse, error)

	// RolesPatchWithBodyWithResponse request with any body
	RolesPatchWithBodyWithResponse(ctx context.Context, roleId RoleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RolesPatchResponse, error)

	RolesPatchWithResponse(ctx context.Context, roleId RoleId, body RolesPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*RolesPatchResponse, error)

	// RolesUpdateWithBodyWithResponse request with any body
	RolesUpdateWithBodyWithResponse(ctx context.Context, roleId RoleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RolesUpdateResponse, error)

	RolesUpdateWithResponse(ctx context.Context, roleId RoleId, body RolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RolesUpdateResponse, error)
}

type ActionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionsList
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ActionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ExistingAction
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ActionsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON412      *PreconditionFailed
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ActionsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExistingAction
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ActionsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExistingAction
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ActionsPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExistingAction
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ActionsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PermissionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionsList
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PermissionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PermissionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PermissionsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ExistingPermission
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PermissionsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PermissionsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PermissionsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON412      *PreconditionFailed
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PermissionsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PermissionsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PermissionsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExistingPermission
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PermissionsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PermissionsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PermissionsPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExistingPermission
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PermissionsPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PermissionsPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PermissionsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExistingPermission
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PermissionsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PermissionsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RolesList
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r RolesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ExistingRole
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r RolesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON412      *PreconditionFailed
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r RolesDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExistingRole
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r RolesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExistingRole
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r RolesPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExistingRole
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON429      *TooManyRequests
	JSON500      *ServerError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r RolesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ActionsListWithResponse request returning *ActionsListResponse
func (c *ClientWithResponses) ActionsListWithResponse(ctx context.Context, params *ActionsListParams, reqEditors ...RequestEditorFn) (*ActionsListResponse, error) {
	rsp, err := c.ActionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsListResponse(rsp)
}

// ActionsCreateWithBodyWithResponse request with arbitrary body returning *ActionsCreateResponse
func (c *ClientWithResponses) ActionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsCreateResponse, error) {
	rsp, err := c.ActionsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsCreateResponse(rsp)
}

func (c *ClientWithResponses) ActionsCreateWithResponse(ctx context.Context, body ActionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsCreateResponse, error) {
	rsp, err := c.ActionsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsCreateResponse(rsp)
}

// ActionsDeleteWithResponse request returning *ActionsDeleteResponse
func (c *ClientWithResponses) ActionsDeleteWithResponse(ctx context.Context, actionId ActionId, reqEditors ...RequestEditorFn) (*ActionsDeleteResponse, error) {
	rsp, err := c.ActionsDelete(ctx, actionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsDeleteResponse(rsp)
}

// ActionsGetWithResponse request returning *ActionsGetResponse
func (c *ClientWithResponses) ActionsGetWithResponse(ctx context.Context, actionId ActionId, reqEditors ...RequestEditorFn) (*ActionsGetResponse, error) {
	rsp, err := c.ActionsGet(ctx, actionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsGetResponse(rsp)
}

// ActionsPatchWithBodyWithResponse request with arbitrary body returning *ActionsPatchResponse
func (c *ClientWithResponses) ActionsPatchWithBodyWithResponse(ctx context.Context, actionId ActionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsPatchResponse, error) {
	rsp, err := c.ActionsPatchWithBody(ctx, actionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsPatchResponse(rsp)
}

func (c *ClientWithResponses) ActionsPatchWithResponse(ctx context.Context, actionId ActionId, body ActionsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsPatchResponse, error) {
	rsp, err := c.ActionsPatch(ctx, actionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsPatchResponse(rsp)
}

// ActionsUpdateWithBodyWithResponse request with arbitrary body returning *ActionsUpdateResponse
func (c *ClientWithResponses) ActionsUpdateWithBodyWithResponse(ctx context.Context, actionId ActionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionsUpdateResponse, error) {
	rsp, err := c.ActionsUpdateWithBody(ctx, actionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ActionsUpdateWithResponse(ctx context.Context, actionId ActionId, body ActionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionsUpdateResponse, error) {
	rsp, err := c.ActionsUpdate(ctx, actionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsUpdateResponse(rsp)
}

// PermissionsListWithResponse request returning *PermissionsListResponse
func (c *ClientWithResponses) PermissionsListWithResponse(ctx context.Context, params *PermissionsListParams, reqEditors ...RequestEditorFn) (*PermissionsListResponse, error) {
	rsp, err := c.PermissionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsListResponse(rsp)
}

// PermissionsCreateWithBodyWithResponse request with arbitrary body returning *PermissionsCreateResponse
func (c *ClientWithResponses) PermissionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PermissionsCreateResponse, error) {
	rsp, err := c.PermissionsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsCreateResponse(rsp)
}

func (c *ClientWithResponses) PermissionsCreateWithResponse(ctx context.Context, body PermissionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PermissionsCreateResponse, error) {
	rsp, err := c.PermissionsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsCreateResponse(rsp)
}

// PermissionsDeleteWithResponse request returning *PermissionsDeleteResponse
func (c *ClientWithResponses) PermissionsDeleteWithResponse(ctx context.Context, permissionId PermissionId, reqEditors ...RequestEditorFn) (*PermissionsDeleteResponse, error) {
	rsp, err := c.PermissionsDelete(ctx, permissionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsDeleteResponse(rsp)
}

// PermissionsGetWithResponse request returning *PermissionsGetResponse
func (c *ClientWithResponses) PermissionsGetWithResponse(ctx context.Context, permissionId PermissionId, reqEditors ...RequestEditorFn) (*PermissionsGetResponse, error) {
	rsp, err := c.PermissionsGet(ctx, permissionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsGetResponse(rsp)
}

// PermissionsPatchWithBodyWithResponse request with arbitrary body returning *PermissionsPatchResponse
func (c *ClientWithResponses) PermissionsPatchWithBodyWithResponse(ctx context.Context, permissionId PermissionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PermissionsPatchResponse, error) {
	rsp, err := c.PermissionsPatchWithBody(ctx, permissionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsPatchResponse(rsp)
}

func (c *ClientWithResponses) PermissionsPatchWithResponse(ctx context.Context, permissionId PermissionId, body PermissionsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PermissionsPatchResponse, error) {
	rsp, err := c.PermissionsPatch(ctx, permissionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsPatchResponse(rsp)
}

// PermissionsUpdateWithBodyWithResponse request with arbitrary body returning *PermissionsUpdateResponse
func (c *ClientWithResponses) PermissionsUpdateWithBodyWithResponse(ctx context.Context, permissionId PermissionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PermissionsUpdateResponse, error) {
	rsp, err := c.PermissionsUpdateWithBody(ctx, permissionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsUpdateResponse(rsp)
}

func (c *ClientWithResponses) PermissionsUpdateWithResponse(ctx context.Context, permissionId PermissionId, body PermissionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PermissionsUpdateResponse, error) {
	rsp, err := c.PermissionsUpdate(ctx, permissionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsUpdateResponse(rsp)
}

// RolesListWithResponse request returning *RolesListResponse
func (c *ClientWithResponses) RolesListWithResponse(ctx context.Context, params *RolesListParams, reqEditors ...RequestEditorFn) (*RolesListResponse, error) {
	rsp, err := c.RolesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesListResponse(rsp)
}

// RolesCreateWithBodyWithResponse request with arbitrary body returning *RolesCreateResponse
func (c *ClientWithResponses) RolesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RolesCreateResponse, error) {
	rsp, err := c.RolesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesCreateResponse(rsp)
}

func (c *ClientWithResponses) RolesCreateWithResponse(ctx context.Context, body RolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RolesCreateResponse, error) {
	rsp, err := c.RolesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesCreateResponse(rsp)
}

// RolesDeleteWithResponse request returning *RolesDeleteResponse
func (c *ClientWithResponses) RolesDeleteWithResponse(ctx context.Context, roleId RoleId, reqEditors ...RequestEditorFn) (*RolesDeleteResponse, error) {
	rsp, err := c.RolesDelete(ctx, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesDeleteResponse(rsp)
}

// RolesGetWithResponse request returning *RolesGetResponse
func (c *ClientWithResponses) RolesGetWithResponse(ctx context.Context, roleId RoleId, reqEditors ...RequestEditorFn) (*RolesGetResponse, error) {
	rsp, err := c.RolesGet(ctx, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesGetResponse(rsp)
}

// RolesPatchWithBodyWithResponse request with arbitrary body returning *RolesPatchResponse
func (c *ClientWithResponses) RolesPatchWithBodyWithResponse(ctx context.Context, roleId RoleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RolesPatchResponse, error) {
	rsp, err := c.RolesPatchWithBody(ctx, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesPatchResponse(rsp)
}

func (c *ClientWithResponses) RolesPatchWithResponse(ctx context.Context, roleId RoleId, body RolesPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*RolesPatchResponse, error) {
	rsp, err := c.RolesPatch(ctx, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesPatchResponse(rsp)
}

// RolesUpdateWithBodyWithResponse request with arbitrary body returning *RolesUpdateResponse
func (c *ClientWithResponses) RolesUpdateWithBodyWithResponse(ctx context.Context, roleId RoleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RolesUpdateResponse, error) {
	rsp, err := c.RolesUpdateWithBody(ctx, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesUpdateResponse(rsp)
}

func (c *ClientWithResponses) RolesUpdateWithResponse(ctx context.Context, roleId RoleId, body RolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RolesUpdateResponse, error) {
	rsp, err := c.RolesUpdate(ctx, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesUpdateResponse(rsp)
}

// ParseActionsListResponse parses an HTTP response from a ActionsListWithResponse call
func ParseActionsListResponse(rsp *http.Response) (*ActionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseActionsCreateResponse parses an HTTP response from a ActionsCreateWithResponse call
func ParseActionsCreateResponse(rsp *http.Response) (*ActionsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ExistingAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseActionsDeleteResponse parses an HTTP response from a ActionsDeleteWithResponse call
func ParseActionsDeleteResponse(rsp *http.Response) (*ActionsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseActionsGetResponse parses an HTTP response from a ActionsGetWithResponse call
func ParseActionsGetResponse(rsp *http.Response) (*ActionsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExistingAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseActionsPatchResponse parses an HTTP response from a ActionsPatchWithResponse call
func ParseActionsPatchResponse(rsp *http.Response) (*ActionsPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExistingAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseActionsUpdateResponse parses an HTTP response from a ActionsUpdateWithResponse call
func ParseActionsUpdateResponse(rsp *http.Response) (*ActionsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExistingAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePermissionsListResponse parses an HTTP response from a PermissionsListWithResponse call
func ParsePermissionsListResponse(rsp *http.Response) (*PermissionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PermissionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePermissionsCreateResponse parses an HTTP response from a PermissionsCreateWithResponse call
func ParsePermissionsCreateResponse(rsp *http.Response) (*PermissionsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PermissionsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ExistingPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePermissionsDeleteResponse parses an HTTP response from a PermissionsDeleteWithResponse call
func ParsePermissionsDeleteResponse(rsp *http.Response) (*PermissionsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PermissionsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePermissionsGetResponse parses an HTTP response from a PermissionsGetWithResponse call
func ParsePermissionsGetResponse(rsp *http.Response) (*PermissionsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PermissionsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExistingPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePermissionsPatchResponse parses an HTTP response from a PermissionsPatchWithResponse call
func ParsePermissionsPatchResponse(rsp *http.Response) (*PermissionsPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PermissionsPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExistingPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePermissionsUpdateResponse parses an HTTP response from a PermissionsUpdateWithResponse call
func ParsePermissionsUpdateResponse(rsp *http.Response) (*PermissionsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PermissionsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExistingPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRolesListResponse parses an HTTP response from a RolesListWithResponse call
func ParseRolesListResponse(rsp *http.Response) (*RolesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RolesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRolesCreateResponse parses an HTTP response from a RolesCreateWithResponse call
func ParseRolesCreateResponse(rsp *http.Response) (*RolesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ExistingRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRolesDeleteResponse parses an HTTP response from a RolesDeleteWithResponse call
func ParseRolesDeleteResponse(rsp *http.Response) (*RolesDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRolesGetResponse parses an HTTP response from a RolesGetWithResponse call
func ParseRolesGetResponse(rsp *http.Response) (*RolesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExistingRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRolesPatchResponse parses an HTTP response from a RolesPatchWithResponse call
func ParseRolesPatchResponse(rsp *http.Response) (*RolesPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExistingRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRolesUpdateResponse parses an HTTP response from a RolesUpdateWithResponse call
func ParseRolesUpdateResponse(rsp *http.Response) (*RolesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExistingRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20250507074024-cc72767e6eac DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List All Projects
	// (GET /v1/projects)
	ProjectsList(c *gin.Context, params ProjectsListParams)
	// Create a Project
	// (POST /v1/projects)
	ProjectsCreate(c *gin.Context)
	// Delete an Existing Project
	// (DELETE /v1/projects/{project_id})
	ProjectsDelete(c *gin.Context, projectId ProjectId)
	// Retrieve an Existing Project
	// (GET /v1/projects/{project_id})
	ProjectsGet(c *gin.Context, projectId ProjectId)
	// Patch a Project
	// (PATCH /v1/projects/{project_id})
	ProjectsPatch(c *gin.Context, projectId ProjectId)
	// Update a Project
	// (PUT /v1/projects/{project_id})
	ProjectsUpdate(c *gin.Context, projectId ProjectId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ProjectsList operation middleware
func (siw *ServerInterfaceWrapper) ProjectsList(c *gin.Context) {

	var err error

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProjectsListParams

	// ------------- Optional query parameter "skip" -------------

	err = runtime.BindQueryParameter("form", true, false, "skip", c.Request.URL.Query(), &params.Skip)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter skip: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "searchFilter" -------------

	if paramValue := c.Query("searchFilter"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument searchFilter is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "searchFilter", c.Request.URL.Query(), &params.SearchFilter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter searchFilter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsList(c, params)
}

// ProjectsCreate operation middleware
func (siw *ServerInterfaceWrapper) ProjectsCreate(c *gin.Context) {

	c.Set(Bearer_authScopes, []string{"project:create"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsCreate(c)
}

// ProjectsDelete operation middleware
func (siw *ServerInterfaceWrapper) ProjectsDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsDelete(c, projectId)
}

// ProjectsGet operation middleware
func (siw *ServerInterfaceWrapper) ProjectsGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsGet(c, projectId)
}

// ProjectsPatch operation middleware
func (siw *ServerInterfaceWrapper) ProjectsPatch(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsPatch(c, projectId)
}

// ProjectsUpdate operation middleware
func (siw *ServerInterfaceWrapper) ProjectsUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsUpdate(c, projectId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/projects", wrapper.ProjectsList)
	router.POST(options.BaseURL+"/v1/projects", wrapper.ProjectsCreate)
	router.DELETE(options.BaseURL+"/v1/projects/:project_id", wrapper.ProjectsDelete)
	router.GET(options.BaseURL+"/v1/projects/:project_id", wrapper.ProjectsGet)
	router.PATCH(options.BaseURL+"/v1/projects/:project_id", wrapper.ProjectsPatch)
	router.PUT(options.BaseURL+"/v1/projects/:project_id", wrapper.ProjectsUpdate)
}

type ExistingProjectJSONResponse Project

type ForbiddenJSONResponse Error

type NoContentResponse struct {
}

type NotFoundJSONResponse Error

type PreconditionFailedJSONResponse Error

type ProjectsListJSONResponse struct {
	// Content Array of actions.
	Content  *[]Project `json:"content,omitempty"`
	Pageable *Pages     `json:"pageable,omitempty"`
}

type ServerErrorJSONResponse Error

type TooManyRequestsJSONResponse Error

type UnauthorizedJSONResponse Error

type UnexpectedErrorJSONResponse Error

type ProjectsListRequestObject struct {
	Params ProjectsListParams
}

type ProjectsListResponseObject interface {
	VisitProjectsListResponse(w http.ResponseWriter) error
}

type ProjectsList200JSONResponse struct{ ProjectsListJSONResponse }

func (response ProjectsList200JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsList401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsList401JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsList403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsList403JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsList429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsList429JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsList500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsList500JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsListdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsListdefaultJSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsCreateRequestObject struct {
	Body *ProjectsCreateJSONRequestBody
}

type ProjectsCreateResponseObject interface {
	VisitProjectsCreateResponse(w http.ResponseWriter) error
}

type ProjectsCreate201JSONResponse struct{ ExistingProjectJSONResponse }

func (response ProjectsCreate201JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreate401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsCreate401JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreate403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsCreate403JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreate429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsCreate429JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreate500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsCreate500JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreatedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsCreatedefaultJSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsDeleteRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type ProjectsDeleteResponseObject interface {
	VisitProjectsDeleteResponse(w http.ResponseWriter) error
}

type ProjectsDelete204Response = NoContentResponse

func (response ProjectsDelete204Response) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ProjectsDelete401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsDelete401JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsDelete403JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete404JSONResponse struct{ NotFoundJSONResponse }

func (response ProjectsDelete404JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete412JSONResponse struct{ PreconditionFailedJSONResponse }

func (response ProjectsDelete412JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsDelete429JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsDelete500JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDeletedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsDeletedefaultJSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsGetRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type ProjectsGetResponseObject interface {
	VisitProjectsGetResponse(w http.ResponseWriter) error
}

type ProjectsGet200JSONResponse struct{ ExistingProjectJSONResponse }

func (response ProjectsGet200JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsGet401JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsGet403JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet404JSONResponse struct{ NotFoundJSONResponse }

func (response ProjectsGet404JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsGet429JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsGet500JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGetdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsGetdefaultJSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsPatchRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *ProjectsPatchJSONRequestBody
}

type ProjectsPatchResponseObject interface {
	VisitProjectsPatchResponse(w http.ResponseWriter) error
}

type ProjectsPatch200JSONResponse struct{ ExistingProjectJSONResponse }

func (response ProjectsPatch200JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsPatch401JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsPatch403JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch404JSONResponse struct{ NotFoundJSONResponse }

func (response ProjectsPatch404JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsPatch429JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsPatch500JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatchdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsPatchdefaultJSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsUpdateRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *ProjectsUpdateJSONRequestBody
}

type ProjectsUpdateResponseObject interface {
	VisitProjectsUpdateResponse(w http.ResponseWriter) error
}

type ProjectsUpdate200JSONResponse struct{ ExistingProjectJSONResponse }

func (response ProjectsUpdate200JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsUpdate401JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsUpdate403JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate404JSONResponse struct{ NotFoundJSONResponse }

func (response ProjectsUpdate404JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsUpdate429JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsUpdate500JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdatedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsUpdatedefaultJSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List All Projects
	// (GET /v1/projects)
	ProjectsList(ctx context.Context, request ProjectsListRequestObject) (ProjectsListResponseObject, error)
	// Create a Project
	// (POST /v1/projects)
	ProjectsCreate(ctx context.Context, request ProjectsCreateRequestObject) (ProjectsCreateResponseObject, error)
	// Delete an Existing Project
	// (DELETE /v1/projects/{project_id})
	ProjectsDelete(ctx context.Context, request ProjectsDeleteRequestObject) (ProjectsDeleteResponseObject, error)
	// Retrieve an Existing Project
	// (GET /v1/projects/{project_id})
	ProjectsGet(ctx context.Context, request ProjectsGetRequestObject) (ProjectsGetResponseObject, error)
	// Patch a Project
	// (PATCH /v1/projects/{project_id})
	ProjectsPatch(ctx context.Context, request ProjectsPatchRequestObject) (ProjectsPatchResponseObject, error)
	// Update a Project
	// (PUT /v1/projects/{project_id})
	ProjectsUpdate(ctx context.Context, request ProjectsUpdateRequestObject) (ProjectsUpdateResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ProjectsList operation middleware
func (sh *strictHandler) ProjectsList(ctx *gin.Context, params ProjectsListParams) {
	var request ProjectsListRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsList(ctx, request.(ProjectsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsListResponseObject); ok {
		if err := validResponse.VisitProjectsListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsCreate operation middleware
func (sh *strictHandler) ProjectsCreate(ctx *gin.Context) {
	var request ProjectsCreateRequestObject

	var body ProjectsCreateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsCreate(ctx, request.(ProjectsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsCreateResponseObject); ok {
		if err := validResponse.VisitProjectsCreateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsDelete operation middleware
func (sh *strictHandler) ProjectsDelete(ctx *gin.Context, projectId ProjectId) {
	var request ProjectsDeleteRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsDelete(ctx, request.(ProjectsDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsDeleteResponseObject); ok {
		if err := validResponse.VisitProjectsDeleteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsGet operation middleware
func (sh *strictHandler) ProjectsGet(ctx *gin.Context, projectId ProjectId) {
	var request ProjectsGetRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsGet(ctx, request.(ProjectsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsGetResponseObject); ok {
		if err := validResponse.VisitProjectsGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsPatch operation middleware
func (sh *strictHandler) ProjectsPatch(ctx *gin.Context, projectId ProjectId) {
	var request ProjectsPatchRequestObject

	request.ProjectId = projectId

	var body ProjectsPatchJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsPatch(ctx, request.(ProjectsPatchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsPatch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsPatchResponseObject); ok {
		if err := validResponse.VisitProjectsPatchResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsUpdate operation middleware
func (sh *strictHandler) ProjectsUpdate(ctx *gin.Context, projectId ProjectId) {
	var request ProjectsUpdateRequestObject

	request.ProjectId = projectId

	var body ProjectsUpdateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsUpdate(ctx, request.(ProjectsUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsUpdateResponseObject); ok {
		if err := validResponse.VisitProjectsUpdateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

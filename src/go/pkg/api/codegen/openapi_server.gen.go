// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20250507074024-cc72767e6eac DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List All Projects
	// (GET /v1/projects)
	ProjectsList(c *gin.Context, params ProjectsListParams)
	// Create a Project
	// (POST /v1/projects)
	ProjectsCreate(c *gin.Context)
	// Delete an Existing Project
	// (DELETE /v1/projects/{project_id})
	ProjectsDelete(c *gin.Context, projectId ProjectId)
	// Retrieve an Existing Project
	// (GET /v1/projects/{project_id})
	ProjectsGet(c *gin.Context, projectId ProjectId)
	// Patch a Project
	// (PATCH /v1/projects/{project_id})
	ProjectsPatch(c *gin.Context, projectId ProjectId)
	// Update a Project
	// (PUT /v1/projects/{project_id})
	ProjectsUpdate(c *gin.Context, projectId ProjectId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ProjectsList operation middleware
func (siw *ServerInterfaceWrapper) ProjectsList(c *gin.Context) {

	var err error

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProjectsListParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "searchFilter" -------------

	if paramValue := c.Query("searchFilter"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument searchFilter is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "searchFilter", c.Request.URL.Query(), &params.SearchFilter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter searchFilter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsList(c, params)
}

// ProjectsCreate operation middleware
func (siw *ServerInterfaceWrapper) ProjectsCreate(c *gin.Context) {

	c.Set(Bearer_authScopes, []string{"project:create"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsCreate(c)
}

// ProjectsDelete operation middleware
func (siw *ServerInterfaceWrapper) ProjectsDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsDelete(c, projectId)
}

// ProjectsGet operation middleware
func (siw *ServerInterfaceWrapper) ProjectsGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsGet(c, projectId)
}

// ProjectsPatch operation middleware
func (siw *ServerInterfaceWrapper) ProjectsPatch(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsPatch(c, projectId)
}

// ProjectsUpdate operation middleware
func (siw *ServerInterfaceWrapper) ProjectsUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Bearer_authScopes, []string{})

	c.Set(Apikey_authScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProjectsUpdate(c, projectId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/projects", wrapper.ProjectsList)
	router.POST(options.BaseURL+"/v1/projects", wrapper.ProjectsCreate)
	router.DELETE(options.BaseURL+"/v1/projects/:project_id", wrapper.ProjectsDelete)
	router.GET(options.BaseURL+"/v1/projects/:project_id", wrapper.ProjectsGet)
	router.PATCH(options.BaseURL+"/v1/projects/:project_id", wrapper.ProjectsPatch)
	router.PUT(options.BaseURL+"/v1/projects/:project_id", wrapper.ProjectsUpdate)
}

type ExistingProjectJSONResponse Project

type ForbiddenJSONResponse Error

type NoContentResponse struct {
}

type NotFoundJSONResponse Error

type PreconditionFailedJSONResponse Error

type ProjectsListJSONResponse struct {
	// Content Array of actions.
	Content  *[]Project `json:"content,omitempty"`
	Pageable *Pages     `json:"pageable,omitempty"`
}

type ServerErrorJSONResponse Error

type TooManyRequestsJSONResponse Error

type UnauthorizedJSONResponse Error

type UnexpectedErrorJSONResponse Error

type ProjectsListRequestObject struct {
	Params ProjectsListParams
}

type ProjectsListResponseObject interface {
	VisitProjectsListResponse(w http.ResponseWriter) error
}

type ProjectsList200JSONResponse struct{ ProjectsListJSONResponse }

func (response ProjectsList200JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsList401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsList401JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsList403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsList403JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsList429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsList429JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsList500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsList500JSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsListdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsListdefaultJSONResponse) VisitProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsCreateRequestObject struct {
	Body *ProjectsCreateJSONRequestBody
}

type ProjectsCreateResponseObject interface {
	VisitProjectsCreateResponse(w http.ResponseWriter) error
}

type ProjectsCreate201JSONResponse struct{ ExistingProjectJSONResponse }

func (response ProjectsCreate201JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreate401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsCreate401JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreate403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsCreate403JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreate429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsCreate429JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreate500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsCreate500JSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsCreatedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsCreatedefaultJSONResponse) VisitProjectsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsDeleteRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type ProjectsDeleteResponseObject interface {
	VisitProjectsDeleteResponse(w http.ResponseWriter) error
}

type ProjectsDelete204Response = NoContentResponse

func (response ProjectsDelete204Response) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ProjectsDelete401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsDelete401JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsDelete403JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete404JSONResponse struct{ NotFoundJSONResponse }

func (response ProjectsDelete404JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete412JSONResponse struct{ PreconditionFailedJSONResponse }

func (response ProjectsDelete412JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsDelete429JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDelete500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsDelete500JSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsDeletedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsDeletedefaultJSONResponse) VisitProjectsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsGetRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type ProjectsGetResponseObject interface {
	VisitProjectsGetResponse(w http.ResponseWriter) error
}

type ProjectsGet200JSONResponse struct{ ExistingProjectJSONResponse }

func (response ProjectsGet200JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsGet401JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsGet403JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet404JSONResponse struct{ NotFoundJSONResponse }

func (response ProjectsGet404JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsGet429JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGet500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsGet500JSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsGetdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsGetdefaultJSONResponse) VisitProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsPatchRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *ProjectsPatchJSONRequestBody
}

type ProjectsPatchResponseObject interface {
	VisitProjectsPatchResponse(w http.ResponseWriter) error
}

type ProjectsPatch200JSONResponse struct{ ExistingProjectJSONResponse }

func (response ProjectsPatch200JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsPatch401JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsPatch403JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch404JSONResponse struct{ NotFoundJSONResponse }

func (response ProjectsPatch404JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsPatch429JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatch500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsPatch500JSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsPatchdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsPatchdefaultJSONResponse) VisitProjectsPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProjectsUpdateRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *ProjectsUpdateJSONRequestBody
}

type ProjectsUpdateResponseObject interface {
	VisitProjectsUpdateResponse(w http.ResponseWriter) error
}

type ProjectsUpdate200JSONResponse struct{ ExistingProjectJSONResponse }

func (response ProjectsUpdate200JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ProjectsUpdate401JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate403JSONResponse struct{ ForbiddenJSONResponse }

func (response ProjectsUpdate403JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate404JSONResponse struct{ NotFoundJSONResponse }

func (response ProjectsUpdate404JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate429JSONResponse struct{ TooManyRequestsJSONResponse }

func (response ProjectsUpdate429JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdate500JSONResponse struct{ ServerErrorJSONResponse }

func (response ProjectsUpdate500JSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProjectsUpdatedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ProjectsUpdatedefaultJSONResponse) VisitProjectsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List All Projects
	// (GET /v1/projects)
	ProjectsList(ctx context.Context, request ProjectsListRequestObject) (ProjectsListResponseObject, error)
	// Create a Project
	// (POST /v1/projects)
	ProjectsCreate(ctx context.Context, request ProjectsCreateRequestObject) (ProjectsCreateResponseObject, error)
	// Delete an Existing Project
	// (DELETE /v1/projects/{project_id})
	ProjectsDelete(ctx context.Context, request ProjectsDeleteRequestObject) (ProjectsDeleteResponseObject, error)
	// Retrieve an Existing Project
	// (GET /v1/projects/{project_id})
	ProjectsGet(ctx context.Context, request ProjectsGetRequestObject) (ProjectsGetResponseObject, error)
	// Patch a Project
	// (PATCH /v1/projects/{project_id})
	ProjectsPatch(ctx context.Context, request ProjectsPatchRequestObject) (ProjectsPatchResponseObject, error)
	// Update a Project
	// (PUT /v1/projects/{project_id})
	ProjectsUpdate(ctx context.Context, request ProjectsUpdateRequestObject) (ProjectsUpdateResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ProjectsList operation middleware
func (sh *strictHandler) ProjectsList(ctx *gin.Context, params ProjectsListParams) {
	var request ProjectsListRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsList(ctx, request.(ProjectsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsListResponseObject); ok {
		if err := validResponse.VisitProjectsListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsCreate operation middleware
func (sh *strictHandler) ProjectsCreate(ctx *gin.Context) {
	var request ProjectsCreateRequestObject

	var body ProjectsCreateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsCreate(ctx, request.(ProjectsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsCreateResponseObject); ok {
		if err := validResponse.VisitProjectsCreateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsDelete operation middleware
func (sh *strictHandler) ProjectsDelete(ctx *gin.Context, projectId ProjectId) {
	var request ProjectsDeleteRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsDelete(ctx, request.(ProjectsDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsDeleteResponseObject); ok {
		if err := validResponse.VisitProjectsDeleteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsGet operation middleware
func (sh *strictHandler) ProjectsGet(ctx *gin.Context, projectId ProjectId) {
	var request ProjectsGetRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsGet(ctx, request.(ProjectsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsGetResponseObject); ok {
		if err := validResponse.VisitProjectsGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsPatch operation middleware
func (sh *strictHandler) ProjectsPatch(ctx *gin.Context, projectId ProjectId) {
	var request ProjectsPatchRequestObject

	request.ProjectId = projectId

	var body ProjectsPatchJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsPatch(ctx, request.(ProjectsPatchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsPatch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsPatchResponseObject); ok {
		if err := validResponse.VisitProjectsPatchResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProjectsUpdate operation middleware
func (sh *strictHandler) ProjectsUpdate(ctx *gin.Context, projectId ProjectId) {
	var request ProjectsUpdateRequestObject

	request.ProjectId = projectId

	var body ProjectsUpdateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectsUpdate(ctx, request.(ProjectsUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectsUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProjectsUpdateResponseObject); ok {
		if err := validResponse.VisitProjectsUpdateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xae3PbNhL/KhhcZno3IWW94of+8+XRutepfYk9vaulUyByJaEhAQYArbA+ffebBUiK",
	"FClLcZ1LO9O/bJJ4/Hb3tw8sdE8DGSdSgDCaju5pwhSLwYDKnxaAf0PQgeKJ4VLQEf1pyYMl+QY/fkPk",
	"nCRswQUzEBIFOo2MJkYSBSZVokM9Cp9YnERARz2Pcpz/MQWVUY8KFgMduU08qoMlxMztNmdpZOyEmAse",
	"p7H932QJjufCwAIUXa89moCatoP8MY1noBAeNxDrHA+EJAFF8i1LZP0dyIrVW9H1ux6N2ScHr9/t7ger",
	"5C8QmCkPm3DPSSr4xxQID0EYPuegyFwqwkg+CzVpMSbMLCsQN2t6VMHHlCsI6cioFKqg51LFzNARTVM7",
	"sgWpNoqLBV17VJsssm+41U4FuQamguV0ziMDqimE+0zcZxJIEXL8YgWJuDaFLJq269vNf+NWf0icZwrm",
	"dET/crQh75H7qo8KrDOmoSoNqsA+S2Wa0N9JZbhYkEBxA4ozi9ksweL2SKrxIyNj+nxMiVRkTP0xJYmC",
	"Of+EdNcJBHyeEaYDECEOlorgFuVTCKrmDbf0uRXbo76jGAtDBVrTyQ7lIO6qEiyvnZcaAwqn/Oev4/Hz",
	"//p/u2X+r+f+z13/bDp5/oy22Dh/wZRiGV0jOxXoRAoNdkn4xDXqY5prE98FUhgQ9l+WJBEPGOru6BeN",
	"CryvAGNRdDmno9uD7ETXE7t93RzXSyAFILLiUURmQBj5/t3lj0TOcB5ZcbMkjHyAjAQsiiAk7/Ml33cI",
	"zr9jUQoYAMyS680iorYAmlgbJkKmwoKehBmj+Cw1oFFVc6lmPAxBHKCE0rr3FL28MtejMWhtQxX9t0wJ",
	"U0CENIRFkVxBiBxiQQBaO7gKtExVAB1L2YOID0pJRVuU+aYEsfaokNOKDE2ts8C67IppolMLaJ5GhInQ",
	"qqq0yUyGGeGaQJyYrOMWNtO5TEX4CDVt5lbVlJPA6oFkMiUYEEBjoglkGoVWfzMgduZTKKq2IWoAN9is",
	"nigoY9p0zngEj5G1bZWq1AETuG0IERhL18IiSNcCne6QWN4BBhkF9j9Twa7JnCttnkAjlyLKEIM1c4Ek",
	"YALV7hAWqnGBfYrh8pHBIlEyAWW4i0A7SXqOIQvd2qHRNjEWofCggLMd/TxbgrCZM9KDS7AFxoTNCi6U",
	"fIEYpp84iGlQd6CmztCfT9ra9CpbbwR8SiBAn3RjfM1DIDmhfjP/3tk13XKWaEbKacxENs1jgX6EMM01",
	"qhKdX12Qt8xg5o+5IfApAAjhSeLLjqVx5VSw1Cyl4r8+KqjUptftg7y22SU1SywtAwSQyfQpBLqpbmul",
	"KNjwaKblzy1U0zLOiUWKl08hQcnfYkyxpiuECjHq0am9hNdLqUy1gg+kchHA1oBGWk/97vr6Ct3VpJoE",
	"MoTyaNIhb6QiJNeAZwdfvMqPAWUkcaNdOTrsDmsrrWxanAEZb1JqZ0yrZWct1zbKwlLbTeHyTxhf7riV",
	"h4Uui7GIcOFOGJge2EymxoK3yvMIF0GU2hkkBMN4ZA+IS4gSm7GiOyDckNUSBEmk1nwWQa1SbhYCK1CQ",
	"l0u2aG+pBlqEy9299fx1mThJoswjjmgiTCQXRpOYZbkIYO1gF0HDmCUzaPNc57lmIHSiKEjyM8UsXWjM",
	"1DIBazedJviJGB58ALNRRsGczCqPa51u6WEYnoWng5MX/iB4cewPz/ovfDaAEx9mvcHJHMLeCZw1BV9X",
	"T1K3lFcDxKSRyfCbYdM63eu6umg1dklQbjREc0S+ldEVMIwMrC2pE8PjItst+B0IwgW5eHd5etztkUDG",
	"M45n95DZkih0ox0KZwYFiQKNPu+0b7ZLuXz3ukL73d6p3z3z+yfX/e6o1x0NXvxMvc1pGffzcS97GmUh",
	"lkPFabRBr0K+WdZeWacaFFktZQGlhrGO62TWH7LgbOC/GJ7M/eFsFvizYwj9/nEAx8fDwSDshVWc+al+",
	"L8S8ZPtKJigLxi9mgkK+vSbIB34FE6RJ+BW9IN/9C5qgkG+vCfKBX8EEd6A0d9VHE1/+0ZXcO5D1dm5S",
	"bfc1Aqs7PTRqifb+JWIJUqVAGNuuJMI1NLmzaq3nauPuNsJSLVyYQZ/uh/xQNxXRiK2OatFIPRBSv/so",
	"TO3tOsQz54CJNyMr24/OrWX7z0wBwYlbTL+lzytJaFI5N7bUCq3AyhOjkYZF7bjsp4a22B3jka3FWaCk",
	"1oRFkVWfrhuu+xg1tbJt07nbdcZ2hdBDdbN1qbblP6sHu70vVhj7dt6uQtoO3fXCJu+mVg3iipnWKqcG",
	"seGTNas2w3TluQgUhbpb4o1r4La6FIvt4X7n5DbDWpu0x9bGFcJWFENXvblxZwpkWDXa9voDGL44PvHh",
	"9Gzm9/rhwGdDLDP7x8e9Ye9k2O12W6Jtpfl82/XPmD8/999M7k/XfvVx+DmPvf76WasqNASp4iZ7hxxx",
	"hmIJ/wDZFI+hltEIZAkstBcIeef8X/751YX/D8g2i7KE4/PaozOmeVDOt+zDAfb1ZvzSmMSOBqZAlcPd",
	"45tCJb+syg69XcN+bS4icfqUJYm9mYnkypXHEQdhXiqw1mORdnhk4gSdSabCEQYCOqJvgbnEad+6ePQB",
	"xI2K8m1GR0eRDFi0lNqMTrun3SOW8KO73pHd+8iOrrELX/c34DBL19AV53xb9b+UITReHrx52TKwuirk",
	"q0rmTnbUoyvFDcL7Cf8Wr59OWnyFJ1ebAbixbvDPlAcftGHKkFcw58LdYPnkMgFxfnVBBh30grKEoL1O",
	"t9OziktAsITTER10up2Bc42llQ2hlFdfo3u6gLaUJt0dGeaFTKaqvCzziAYREka+fX1dHj+NJO+ry77H",
	"LIIRzNriAlV5lX/6gWtj0WxudndczWyG2E7nzjBfHVeUDAeMtan8kDVbbxtduK/cUfW73V1JpBx3VG9M",
	"rz067Pb2z0q3+lrD7mD/pHn1mmXYP9s/o9mIXHv0xSFi1fqx9uCTX0rvl2yrQ2fjahrHTGV0RJEr5DyK",
	"yNXmptawBVKm5BOdYPqUuoXDL211RRgRsKpeXLcT042mZWPm7zLMvtxFY16MtBUNk3W9SYJF1rrBtgN4",
	"07g2/ZNw7YTLE7m1XS2n3haF2chV6nSCFtsQtGTY1aZkavJz7dVi7tH95mcSa8daPP63xuDNvVs+pwy/",
	"r17/8Pr6dRGBdSMEHz27env5/euX19OLV+875FqOxeaWzKusSOJUG9uuXLI73Cqr3NwxrflCuAthbjrk",
	"XGSkoNVYbMbZNew1H5lhgVfOc787MEpmuKtUrmHKo4goCIDjhmTY6+d3KmMxFufVm94iwWzN6G93mrlZ",
	"EiHze2CxOfKNxfWSa8JFaG8atGtMuCI0X5lp1ARuCGFl6yjrjMXOYPHKmeyz89jm9zEtCWS4n7+V+/L/",
	"ozMfhqxo5OOMXv+QZNi8ev7j5qpXpae+zv3j4aDg7ay7FmDaHP6heqvm7DtJ+y2YJ2Zs9/edhD6ft39M",
	"7r0FozjcfRb7EmaCZSv/XCuUSBFl+Q/JeFC5v7c/dmjS8+r8+uV3hxG0Q84NiYBpQ6SAoiswl1EkV/Ym",
	"b7OXAAhtbpsBbvRA+XZl5fnN9H5c6Xd4wXdIafenV/0uvMoyal9t59EkNQ+5UZur3Fwf7ChR9KB/2Lpr",
	"r2/cWChfyzme6lxUb6ZO/nSlP44r3eS+sOec9PBZbLL2tjqst+44ZkE7RqdlF063tuFsw6c+iCW887Fs",
	"s3UCGbuBkxLjtnNfFQcnJtgCYnSCsrtbirOerP8XAAD//99h2oDOMAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

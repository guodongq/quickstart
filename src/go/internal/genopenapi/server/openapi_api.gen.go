// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List All Actions
	// (GET /v1/actions)
	ActionsList(w http.ResponseWriter, r *http.Request, params ActionsListParams)
	// Create an Action
	// (POST /v1/actions)
	ActionsCreate(w http.ResponseWriter, r *http.Request)
	// Delete an Existing Action
	// (DELETE /v1/actions/{action_id})
	ActionsDelete(w http.ResponseWriter, r *http.Request, actionId ActionId)
	// Retrieve an Existing Action
	// (GET /v1/actions/{action_id})
	ActionsGet(w http.ResponseWriter, r *http.Request, actionId ActionId)
	// Patch an Action
	// (PATCH /v1/actions/{action_id})
	ActionsPatch(w http.ResponseWriter, r *http.Request, actionId ActionId)
	// Update an Action
	// (PUT /v1/actions/{action_id})
	ActionsUpdate(w http.ResponseWriter, r *http.Request, actionId ActionId)
	// List All Permissions
	// (GET /v1/permissions)
	PermissionsList(w http.ResponseWriter, r *http.Request, params PermissionsListParams)
	// Create an Permission
	// (POST /v1/permissions)
	PermissionsCreate(w http.ResponseWriter, r *http.Request)
	// Delete an Existing Permission
	// (DELETE /v1/permissions/{permission_id})
	PermissionsDelete(w http.ResponseWriter, r *http.Request, permissionId PermissionId)
	// Retrieve an Existing Permission
	// (GET /v1/permissions/{permission_id})
	PermissionsGet(w http.ResponseWriter, r *http.Request, permissionId PermissionId)
	// Patch an Permission
	// (PATCH /v1/permissions/{permission_id})
	PermissionsPatch(w http.ResponseWriter, r *http.Request, permissionId PermissionId)
	// Update an Permission
	// (PUT /v1/permissions/{permission_id})
	PermissionsUpdate(w http.ResponseWriter, r *http.Request, permissionId PermissionId)
	// List All Roles
	// (GET /v1/roles)
	RolesList(w http.ResponseWriter, r *http.Request, params RolesListParams)
	// Create an Role
	// (POST /v1/roles)
	RolesCreate(w http.ResponseWriter, r *http.Request)
	// Delete an Existing Role
	// (DELETE /v1/roles/{role_id})
	RolesDelete(w http.ResponseWriter, r *http.Request, roleId RoleId)
	// Retrieve an Existing Role
	// (GET /v1/roles/{role_id})
	RolesGet(w http.ResponseWriter, r *http.Request, roleId RoleId)
	// Patch an Role
	// (PATCH /v1/roles/{role_id})
	RolesPatch(w http.ResponseWriter, r *http.Request, roleId RoleId)
	// Update an Role
	// (PUT /v1/roles/{role_id})
	RolesUpdate(w http.ResponseWriter, r *http.Request, roleId RoleId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List All Actions
// (GET /v1/actions)
func (_ Unimplemented) ActionsList(w http.ResponseWriter, r *http.Request, params ActionsListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an Action
// (POST /v1/actions)
func (_ Unimplemented) ActionsCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an Existing Action
// (DELETE /v1/actions/{action_id})
func (_ Unimplemented) ActionsDelete(w http.ResponseWriter, r *http.Request, actionId ActionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve an Existing Action
// (GET /v1/actions/{action_id})
func (_ Unimplemented) ActionsGet(w http.ResponseWriter, r *http.Request, actionId ActionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Patch an Action
// (PATCH /v1/actions/{action_id})
func (_ Unimplemented) ActionsPatch(w http.ResponseWriter, r *http.Request, actionId ActionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an Action
// (PUT /v1/actions/{action_id})
func (_ Unimplemented) ActionsUpdate(w http.ResponseWriter, r *http.Request, actionId ActionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List All Permissions
// (GET /v1/permissions)
func (_ Unimplemented) PermissionsList(w http.ResponseWriter, r *http.Request, params PermissionsListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an Permission
// (POST /v1/permissions)
func (_ Unimplemented) PermissionsCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an Existing Permission
// (DELETE /v1/permissions/{permission_id})
func (_ Unimplemented) PermissionsDelete(w http.ResponseWriter, r *http.Request, permissionId PermissionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve an Existing Permission
// (GET /v1/permissions/{permission_id})
func (_ Unimplemented) PermissionsGet(w http.ResponseWriter, r *http.Request, permissionId PermissionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Patch an Permission
// (PATCH /v1/permissions/{permission_id})
func (_ Unimplemented) PermissionsPatch(w http.ResponseWriter, r *http.Request, permissionId PermissionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an Permission
// (PUT /v1/permissions/{permission_id})
func (_ Unimplemented) PermissionsUpdate(w http.ResponseWriter, r *http.Request, permissionId PermissionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List All Roles
// (GET /v1/roles)
func (_ Unimplemented) RolesList(w http.ResponseWriter, r *http.Request, params RolesListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an Role
// (POST /v1/roles)
func (_ Unimplemented) RolesCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an Existing Role
// (DELETE /v1/roles/{role_id})
func (_ Unimplemented) RolesDelete(w http.ResponseWriter, r *http.Request, roleId RoleId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve an Existing Role
// (GET /v1/roles/{role_id})
func (_ Unimplemented) RolesGet(w http.ResponseWriter, r *http.Request, roleId RoleId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Patch an Role
// (PATCH /v1/roles/{role_id})
func (_ Unimplemented) RolesPatch(w http.ResponseWriter, r *http.Request, roleId RoleId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an Role
// (PUT /v1/roles/{role_id})
func (_ Unimplemented) RolesUpdate(w http.ResponseWriter, r *http.Request, roleId RoleId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ActionsList operation middleware
func (siw *ServerInterfaceWrapper) ActionsList(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ActionsListParams

	// ------------- Optional query parameter "pageable" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageable", r.URL.Query(), &params.Pageable)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageable", Err: err})
		return
	}

	// ------------- Required query parameter "searchFilter" -------------

	if paramValue := r.URL.Query().Get("searchFilter"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "searchFilter"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "searchFilter", r.URL.Query(), &params.SearchFilter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "searchFilter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ActionsList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ActionsCreate operation middleware
func (siw *ServerInterfaceWrapper) ActionsCreate(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{"action:create"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ActionsCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ActionsDelete operation middleware
func (siw *ServerInterfaceWrapper) ActionsDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "action_id" -------------
	var actionId ActionId

	err = runtime.BindStyledParameterWithOptions("simple", "action_id", chi.URLParam(r, "action_id"), &actionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ActionsDelete(w, r, actionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ActionsGet operation middleware
func (siw *ServerInterfaceWrapper) ActionsGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "action_id" -------------
	var actionId ActionId

	err = runtime.BindStyledParameterWithOptions("simple", "action_id", chi.URLParam(r, "action_id"), &actionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ActionsGet(w, r, actionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ActionsPatch operation middleware
func (siw *ServerInterfaceWrapper) ActionsPatch(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "action_id" -------------
	var actionId ActionId

	err = runtime.BindStyledParameterWithOptions("simple", "action_id", chi.URLParam(r, "action_id"), &actionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ActionsPatch(w, r, actionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ActionsUpdate operation middleware
func (siw *ServerInterfaceWrapper) ActionsUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "action_id" -------------
	var actionId ActionId

	err = runtime.BindStyledParameterWithOptions("simple", "action_id", chi.URLParam(r, "action_id"), &actionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ActionsUpdate(w, r, actionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PermissionsList operation middleware
func (siw *ServerInterfaceWrapper) PermissionsList(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PermissionsListParams

	// ------------- Optional query parameter "pageable" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageable", r.URL.Query(), &params.Pageable)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageable", Err: err})
		return
	}

	// ------------- Required query parameter "searchFilter" -------------

	if paramValue := r.URL.Query().Get("searchFilter"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "searchFilter"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "searchFilter", r.URL.Query(), &params.SearchFilter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "searchFilter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermissionsList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PermissionsCreate operation middleware
func (siw *ServerInterfaceWrapper) PermissionsCreate(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermissionsCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PermissionsDelete operation middleware
func (siw *ServerInterfaceWrapper) PermissionsDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionId

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", chi.URLParam(r, "permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermissionsDelete(w, r, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PermissionsGet operation middleware
func (siw *ServerInterfaceWrapper) PermissionsGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionId

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", chi.URLParam(r, "permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermissionsGet(w, r, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PermissionsPatch operation middleware
func (siw *ServerInterfaceWrapper) PermissionsPatch(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionId

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", chi.URLParam(r, "permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermissionsPatch(w, r, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PermissionsUpdate operation middleware
func (siw *ServerInterfaceWrapper) PermissionsUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "permission_id" -------------
	var permissionId PermissionId

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", chi.URLParam(r, "permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermissionsUpdate(w, r, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RolesList operation middleware
func (siw *ServerInterfaceWrapper) RolesList(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RolesListParams

	// ------------- Optional query parameter "pageable" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageable", r.URL.Query(), &params.Pageable)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageable", Err: err})
		return
	}

	// ------------- Required query parameter "searchFilter" -------------

	if paramValue := r.URL.Query().Get("searchFilter"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "searchFilter"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "searchFilter", r.URL.Query(), &params.SearchFilter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "searchFilter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RolesList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RolesCreate operation middleware
func (siw *ServerInterfaceWrapper) RolesCreate(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RolesCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RolesDelete operation middleware
func (siw *ServerInterfaceWrapper) RolesDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId RoleId

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", chi.URLParam(r, "role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RolesDelete(w, r, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RolesGet operation middleware
func (siw *ServerInterfaceWrapper) RolesGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId RoleId

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", chi.URLParam(r, "role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RolesGet(w, r, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RolesPatch operation middleware
func (siw *ServerInterfaceWrapper) RolesPatch(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId RoleId

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", chi.URLParam(r, "role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RolesPatch(w, r, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RolesUpdate operation middleware
func (siw *ServerInterfaceWrapper) RolesUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId RoleId

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", chi.URLParam(r, "role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Bearer_authScopes, []string{})

	ctx = context.WithValue(ctx, Apikey_authScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RolesUpdate(w, r, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/actions", wrapper.ActionsList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/actions", wrapper.ActionsCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/actions/{action_id}", wrapper.ActionsDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/actions/{action_id}", wrapper.ActionsGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/actions/{action_id}", wrapper.ActionsPatch)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/actions/{action_id}", wrapper.ActionsUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/permissions", wrapper.PermissionsList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/permissions", wrapper.PermissionsCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/permissions/{permission_id}", wrapper.PermissionsDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/permissions/{permission_id}", wrapper.PermissionsGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/permissions/{permission_id}", wrapper.PermissionsPatch)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/permissions/{permission_id}", wrapper.PermissionsUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/roles", wrapper.RolesList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/roles", wrapper.RolesCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/roles/{role_id}", wrapper.RolesDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/roles/{role_id}", wrapper.RolesGet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/roles/{role_id}", wrapper.RolesPatch)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/roles/{role_id}", wrapper.RolesUpdate)
	})

	return r
}
